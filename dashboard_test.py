import streamlit as st
from test import check_proxies, fetch_search_page, extract_product_links, extract_seller_profile_links_fast_no_proxy, extract_seller_data, create_dataframe, https_proxy

# D√©clarez la variable globale avant de l'utiliser
good_proxies = None

# Titre et description de l'application
st.title('Onboarding Carrefour üëÄ')
st.header("Bienvenue dans l'outil : Prospections Vendeurs Marketplaces")
st.markdown("Vous allez pouvoir ressortir tous les vendeurs en fonction de votre mot cl√©.")

# Entr√©e pour le mot-cl√©
mot_cles = st.text_input('√âcris ce que tu veux rechercher', '...')

if mot_cles and mot_cles != '...':
    st.write(f'Le mot cl√© choisi est : {mot_cles}')

    # Charger les proxys une seule fois
    if good_proxies is None:  # Si les proxys n'ont pas encore √©t√© charg√©s
        st.info("Chargement et v√©rification des proxys...")
        with st.spinner("V√©rification des proxys, cela peut prendre un moment..."):
            try:
                proxy_list = https_proxy["url"].tolist()  # Convertir les proxys en liste
                good_proxies = check_proxies(proxy_list)  # V√©rifier les proxys
                if not good_proxies:
                    st.error("Aucun proxy valide trouv√©. Impossible de continuer.")
                    st.stop()
            except Exception as e:
                st.error(f"Erreur lors du chargement des proxys : {e}")
                st.stop()
    else:
        st.info("Les proxys ont d√©j√† √©t√© charg√©s. Pas besoin de les recharger.")

    # Processus de scraping et extraction des donn√©es
    with st.spinner("Recherche en cours... Cela peut prendre quelques minutes."):
        try:
            # √âtape 1 : Construire l'URL de recherche et scraper la page
            st.info("Recherche des r√©sultats pour le mot-cl√©...")
            base_url = "https://www.amazon.fr"
            search_url = f"{base_url}/s?k={mot_cles.replace(' ', '+')}"
            soup = fetch_search_page(search_url, good_proxies)

            if not soup:
                st.error("Impossible de r√©cup√©rer les r√©sultats de recherche. Veuillez r√©essayer.")
                st.stop()

            # √âtape 2 : Extraire les liens des produits
            st.info("Extraction des liens des produits...")
            product_links = extract_product_links(soup)
            if not product_links:
                st.warning("Aucun produit trouv√©. Veuillez essayer un autre mot-cl√©.")
                st.stop()

            # √âtape 3 : Extraire les liens des boutiques des vendeurs
            st.info("Extraction des liens des boutiques des vendeurs...")
            seller_links = extract_seller_profile_links_fast_no_proxy(product_links)
            if not seller_links:
                st.warning("Aucun vendeur trouv√© pour ces produits.")
                st.stop()

            # √âtape 4 : Extraire les informations des vendeurs
            st.info("R√©cup√©ration des informations des vendeurs...")
            seller_data = extract_seller_data(seller_links, limit=50)
            st.write(extract_seller_data(seller_links, limit=50))
            if not seller_data:
                st.warning("Aucune information vendeur trouv√©e.")
                st.stop()

            # √âtape 5 : Cr√©er un DataFrame
            st.info("Cr√©ation du tableau des r√©sultats...")
            df_sellers = create_dataframe(seller_data)
            if df_sellers.empty:
                st.warning("Aucune donn√©e disponible pour cr√©er le tableau.")
                st.stop()

            # Afficher les donn√©es dans un tableau interactif
            st.success("Donn√©es r√©cup√©r√©es avec succ√®s !")
            st.dataframe(df_sellers)

            # Bouton pour t√©l√©charger les donn√©es
            csv = df_sellers.to_csv(index=False).encode('utf-8')
            st.download_button(
                "T√©l√©charger les donn√©es",
                csv,
                "vendeurs_marketplace.csv",
                "text/csv",
                key='download-csv'
            )

        except Exception as e:
            st.error(f"Une erreur s'est produite : {e}")

else:
    st.info("Veuillez entrer un mot-cl√© pour commencer.")
